* {
  margin: 0;
  padding: 0;
}

.wrap {
  width: 80%;
  margin: 0 auto;
}

.row {
  display: flex;
}

.cell {
  width: 30px;
  height: 30px;
  border: 1px solid #aaa;
  display: flex;
  justify-content: center;
  align-items: center;
  cursor: pointer;
}

.cell.ship {
  background-color: #007bff; /* Цвет кораблей */
}

.cell.hit {
  background-color: #dc3545; /* Цвет попаданий */
}

.cell.blocked {
  background-color: gray;
}

.cell:hover {
  background-color: #eee; /* Цвет фона при наведении курсора */
}

.board-redacting {
  display: flex;
  text-align: center;
  flex-direction: column;
  justify-content: center;
  width: 100%;
}

.board-redacting .board {
  margin: 30px auto;
}

.board-redacting p {
  font-size: 16px;
  margin: 5px 0;
}

.redacting-title {
  color: #007bff;
  text-align: center;
  animation: blink 2s infinite; /* Задаем анимацию */
}

/   const [currIndex, setCurrIndex] = useState(0);

//   const handleMoveShips = () => {
//     let newBoard = new Board();
@keyframes blink {
  25% {
    color: #dc3545;
  }

  50% {
    opacity: 0.2; /* Половина времени текст невидимый */
  }
}


// import React, { useState, useEffect } from "react";
// import { Board } from "../Models/Board";
// import BoardComponent from "./BoardComponent";

// const BoardRedacting = ({ ships, board }) => {
/
//     for (let i = 0; i < ships.length; i++) {
//       const currShip = ships[i];
//       for (let j = 0; j < currShip.size; j++) {
//         let newRow = currShip.row;
//         let newCol = currShip.col;

//         if (currShip.orientation === "horizontal") {
//           newCol += j;
//         } else if (currShip.orientation === "vertical") {
//           newRow += j;
//         }

//         newBoard[newRow][newCol] = "S";
//       }
//     }

//     handleBoard(newBoard);
//   };

//   // eslint-disable-next-line react-hooks/exhaustive-deps
//   useEffect(handleMoveShips, [ships]);

//   const handleKeyDown = (e) => {
//     let newShips = [...ships];
//     const currShip = newShips[currIndex];

//     // const isCellOccupied = (row, col) => board[row][col] === "S";

//     const areAdjacentCellsOccupied = (row, col) => {
//       const adjacentCells = [
//         { row: row + 1, col: col },
//         { row: row + 1, col: col - 1 },
//         { row: row + 1, col: col + 1 },
//         { row: row, col: col - 1 },
//         { row: row, col: col + 1 },
//         { row: row - 1, col: col },
//         { row: row - 1, col: col - 1 },
//         { row: row - 1, col: col + 1 },
//       ];

//       for (const adjacentCell of adjacentCells) {
//         if (
//           adjacentCell.row >= 0 &&
//           adjacentCell.row < 10 &&
//           adjacentCell.col >= 0 &&
//           adjacentCell.col < 10 &&
//           isCellOccupied(row, col)
//         ) {
//           board[row][col] = "B";
//           return true;
//         }
//       }

//       return false;
//     };

//     switch (e.key) {
//       case "ArrowUp":
//         if (currShip.row > 0) currShip.row--;
//         break;
//       case "ArrowDown":
//         if (currShip.orientation === "vertical") {
//           if (currShip.row + currShip.size - 1 < 9) currShip.row++;
//         } else {
//           if (currShip.row < 9) currShip.row++;
//         }
//         break;
//       case "ArrowLeft":
//         if (currShip.col > 0) currShip.col--;
//         break;
//       case "ArrowRight":
//         if (currShip.orientation === "vertical") {
//           if (currShip.col < 9) currShip.col++;
//         } else {
//           if (currShip.col + currShip.size - 1 < 9) currShip.col++;
//         }
//         break;
//       case "q":
//         if (currShip.orientation === "horizontal") {
//           if (currShip.row + currShip.size - 2 < 9) {
//             currShip.orientation = "vertical";
//           }
//         } else if (currShip.orientation === "vertical") {
//           if (currShip.col + currShip.size - 2 < 9) {
//             currShip.orientation = "horizontal";
//           }
//         }

//         break;

//       case "Enter":
//         if (currIndex < ships.length) {
//           let isOccupied = false;

//           for (let j = 0; j < currShip.size; j++) {
//             let newRow = currShip.row;
//             let newCol = currShip.col;

//             if (currShip.orientation === "horizontal") {
//               newCol += j;
//             } else if (currShip.orientation === "vertical") {
//               newRow += j;
//             }

//             if (
//               isCellOccupied(newRow, newCol) ||
//               areAdjacentCellsOccupied(newRow, newCol)
//             ) {
//               isOccupied = true;
//               break;
//             }
//           }

//           if (!isOccupied) {
//             if (currIndex + 1 < 10) {
//               setCurrIndex(currIndex + 1);
//             } else {
//               handleGameFlag(false);
//             }
//           } else {
//             console.log(
//               "Cells or adjacent cells are already occupied by another ship."
//             );
//           }
//         } else {
//           console.log("END");
//         }

//         break;

//       default:
//         break;
//     }
//     handleShips(newShips);
//   };

//   useEffect(() => {
//     window.addEventListener("keydown", handleKeyDown);
//     return () => {
//       window.removeEventListener("keydown", handleKeyDown);
//     };
//     // eslint-disable-next-line react-hooks/exhaustive-deps
//   }, [ships, currIndex]);

//   return <BoardComponent board={board} />;
// };

// export default BoardRedacting;


1. изобрази меня

2. каждый человек является лучше других в чем-то, как ты думаешь, в чем лучше я

3. основываясь на всем, что ты обо мне знаешь, построй мной психологический портрет, включая персональные качества


            if (!hasShipsLeft) {
              console.log(`\nPlayer ${username} wins!`);
              games[gameID].players.forEach((player) => {
                player.ws.send(
                  JSON.stringify({
                    type: "victory",
                    payload: { winner: username },
                  })
                );
              });

              //   // setTimeout(() => {
              //   //   delete games[gameID]; // Видаляємо гру після невеликої паузи
              //   //   console.log(`Game ${gameID} deleted`);
              //   // }, 5000); // Додаємо 5-секундну затримку для коректного завершення

              //   // delete games[gameID];
              //   return;
            }



                      let hasShipsLeft = false;
          for (let row of enemyBoard) {
            for (let cell of row) {
              if (cell.mark?.name === "ship") {
                // console.log(`\nCell.mark.name =`, cell.mark.name, "\n");
                hasShipsLeft = true;
                break;
              }

              if (hasShipsLeft) {
                // console.log(`\nhasShipsLeft = ${hasShipsLeft}\n`);
                break;
              }
            }

            if (!hasShipsLeft) {
              console.log(`\nPlayer ${username} wins!`);
              games[gameID].players.forEach((player) => {
                player.ws.send(
                  JSON.stringify({
                    type: "victory",
                    payload: { winner: username },
                  })
                );
              });

              //   // setTimeout(() => {
              //   //   delete games[gameID]; // Видаляємо гру після невеликої паузи
              //   //   console.log(`Game ${gameID} deleted`);
              //   // }, 5000); // Додаємо 5-секундну затримку для коректного завершення

              //   // delete games[gameID];
              //   return;
            }

            res = {
              type: isPerfectHit ? "hit" : "miss",
              payload: { username, x, y },
            };
          }


          
  // function changeBoardAfterShoot(board, setBoard, x, y, isPerfectHit) {
  //   isPerfectHit ? board.addDamage(x, y) : board.addMiss(x, y);
  //   const newBoard = board.getCopyBoard();
  //   setBoard(newBoard);
  // }